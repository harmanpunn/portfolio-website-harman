{
  "id": "24c3a7ff-b903-8022-b439-c302446f0043",
  "title": "Vygil AI: Autonomous Activity Tracking & Anomaly Detection",
  "slug": "vygil-ai-autonomous-activity-tracking-anomaly-detection",
  "excerpt": "What if we could build an AI system that autonomously understands screen content, learns patterns, and provides intelligent insights",
  "content": "> **TL;DR:**Â Vygil is an autonomous AI agent platform that provides intelligent activity tracking using computer vision and large language models, featuring true agentic AI that makes independent decisions about tool usage, maintains persistent memory, and adapts to user patterns in real-time for productivity optimization. The platform supports no-code agent deployment through YAML configuration and multi-sensor data processing for comprehensive insights.\n\n**ðŸš€ Live Demo:**Â [https://vygil-ai-production.up.railway.app/](https://vygil-ai-production.up.railway.app/)\n\nâš¡Â **One Click Deploy**: [https://railway.com/deploy/vygil-ai?referralCode=meIjQ1](https://railway.com/deploy/vygil-ai?referralCode=meIjQ1)\n\n# **What we built**\n\nTraditional activity trackers are passive tools that simply log what you do. Vygil AI takes a different approach by using autonomous AI agents that make independent decisions about how to analyze your screen content, maintain persistent memory across sessions, and adapt to your patterns in real-time.\n\nThe platform addresses the growing need for intelligent productivity monitoring in remote work environments. Instead of manual time tracking or basic screen recording, Vygil provides AI-powered insights that help users understand their focus patterns and optimize their workflow.\n\n**Key features:**\n\n- **Multi-agent architecture**Â with Activity Tracker and Focus Assistant agents\n- **No-code agent deployment**Â through simple YAML configuration files\n- **Multi-sensor data processing**Â supporting screen, camera, microphone, and audio inputs\n- **Autonomous decision making**Â where agents choose appropriate tools for analysis\n- **Persistent memory system**Â that maintains context across sessions\n- **MCP protocol integration**Â for extensible tool ecosystem\n- **Real-time focus analytics**Â with productivity scoring and distraction detection\n- **Multi-LLM support**Â with OpenAI, Anthropic, and Ollama providers\n- **Privacy-first design**Â with local processing and user consent\n# **Agent-First Architecture with MCP Protocol**\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/f931428f-7838-403d-992a-abbb78130578/65a45215-cca7-4f08-b6d1-f538fcdb6dbe/Screenshot_2025-08-10_at_9.40.33_PM.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB4666MOD3NQ7%2F20250818%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250818T031936Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFEaCXVzLXdlc3QtMiJGMEQCIAM5a01ShH5xpqoaVJF4oEewsFAsi178fNezNVUcO3uyAiBigXHNcvkZ%2FtLJe1WJSLtGAAubE6bM4Kj2XSuoJSGgxiqIBAia%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDYzNzQyMzE4MzgwNSIMlYS2vEowQb7USgYwKtwDveN7VyE2AZb6LQeAfwrzqyQwjTd2zT3kLKmy6WgOWaHXT1smALyFgRyU4FUaGT3O3dfPPGwKRfWRv7la8J%2Bf036Y8rs%2FKPrN9wbvLRznfY0sH%2FOft0wQBYXUe0gFwix5K5EuZ1r0AIb%2Btp8uHKUHYKrgPVod5HPwQqB7KaR5COkem%2FMpCZ6ngm8jyylxBmEuBfXIFevhCjU0NsBX7bYUibqlMN8zY6oSktHINFLupxYSmJJfOh1eDqDTDWHk29qfAGnSp7E8xhW3A3jx5DmuMNljvKZLPe1yQ3HdD9ZSfChkT3qtwl%2FRPRURZ%2FkRluqseTjHV4F5c6cW36WnGzgnTf%2Fe0AAiqfxfu1ZHIgwBMxhht%2FV9%2FS07hjhVa4bhrbHms0DdgeBhhqTCA%2BIcQKrXc0d8Wmh%2B0Sxzp%2FbPpVVc7SeyCMYTDefDt1JZdpX8NFYczreBKfgtpXG0GJTcQuxKFL7LldICcWclTED3eszvM5pCWGbYFP3DVrAGJvNHttgitY%2FlFVebUeHkUnZ1Mbmnl%2BflRazGyRGzCHXgBdrJ1JMoL%2FNZNNRF2OMAFNawrksF8j7gdkDKFdlh2m8vfIcsYlHkRKLuZbZsb4PGReh3U8x9RQRRm1TzDjKaKxUwiOuJxQY6pgHvWHDLgeN8ADCtMzSFLdg1I3uR5WR4f7Sn07v6LSabVouen8Av2gyE1Eh4RWuz%2FsXi7UaGMCjW%2F3QISbtHsehqyZPzx5FJanEvgOhNYi6KL6KpMnp6hIULRWW7CnmnAeFpciXoWGHsfM%2FpYt77XspjDSLUEXKF2%2BSCn%2BpNg0Hvg5hKHmf2r8XrPpGU9Oq%2FwEkkiAV9dSAk78KRwmDsgww6DhFQLc3d&X-Amz-Signature=82f71b054317a24c22e7455a99171ada138791a97875c458caddc565ac738efa&X-Amz-SignedHeaders=host&x-amz-checksum-mode=ENABLED&x-id=GetObject)\n\nVygil follows a multi-layer architecture designed for scalability and extensibility. The system consists of four main components that work together to provide intelligent activity monitoring.\n\n![](https://prod-files-secure.s3.us-west-2.amazonaws.com/f931428f-7838-403d-992a-abbb78130578/6255c681-9b86-4f16-b6f6-4607a0ab801d/workflow-diagram.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB4666MOD3NQ7%2F20250818%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250818T031936Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFEaCXVzLXdlc3QtMiJGMEQCIAM5a01ShH5xpqoaVJF4oEewsFAsi178fNezNVUcO3uyAiBigXHNcvkZ%2FtLJe1WJSLtGAAubE6bM4Kj2XSuoJSGgxiqIBAia%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDYzNzQyMzE4MzgwNSIMlYS2vEowQb7USgYwKtwDveN7VyE2AZb6LQeAfwrzqyQwjTd2zT3kLKmy6WgOWaHXT1smALyFgRyU4FUaGT3O3dfPPGwKRfWRv7la8J%2Bf036Y8rs%2FKPrN9wbvLRznfY0sH%2FOft0wQBYXUe0gFwix5K5EuZ1r0AIb%2Btp8uHKUHYKrgPVod5HPwQqB7KaR5COkem%2FMpCZ6ngm8jyylxBmEuBfXIFevhCjU0NsBX7bYUibqlMN8zY6oSktHINFLupxYSmJJfOh1eDqDTDWHk29qfAGnSp7E8xhW3A3jx5DmuMNljvKZLPe1yQ3HdD9ZSfChkT3qtwl%2FRPRURZ%2FkRluqseTjHV4F5c6cW36WnGzgnTf%2Fe0AAiqfxfu1ZHIgwBMxhht%2FV9%2FS07hjhVa4bhrbHms0DdgeBhhqTCA%2BIcQKrXc0d8Wmh%2B0Sxzp%2FbPpVVc7SeyCMYTDefDt1JZdpX8NFYczreBKfgtpXG0GJTcQuxKFL7LldICcWclTED3eszvM5pCWGbYFP3DVrAGJvNHttgitY%2FlFVebUeHkUnZ1Mbmnl%2BflRazGyRGzCHXgBdrJ1JMoL%2FNZNNRF2OMAFNawrksF8j7gdkDKFdlh2m8vfIcsYlHkRKLuZbZsb4PGReh3U8x9RQRRm1TzDjKaKxUwiOuJxQY6pgHvWHDLgeN8ADCtMzSFLdg1I3uR5WR4f7Sn07v6LSabVouen8Av2gyE1Eh4RWuz%2FsXi7UaGMCjW%2F3QISbtHsehqyZPzx5FJanEvgOhNYi6KL6KpMnp6hIULRWW7CnmnAeFpciXoWGHsfM%2FpYt77XspjDSLUEXKF2%2BSCn%2BpNg0Hvg5hKHmf2r8XrPpGU9Oq%2FwEkkiAV9dSAk78KRwmDsgww6DhFQLc3d&X-Amz-Signature=e9ca5dd67b5b3931e42f362bf67c139d2fe5e60961a3e9cc541657fa9fe467c0&X-Amz-SignedHeaders=host&x-amz-checksum-mode=ENABLED&x-id=GetObject)\n\n**Agent-Driven Processing Pipeline:**\n\n1. **Autonomous Decision Making**Â - Agent selects appropriate MCP tools based on context\n1. **Multi-Modal Analysis**Â - OCR processing with confidence scoring via Tesseract.js\n1. **Memory Integration**Â - Persistent context injection across sessions\n1. **LLM Classification**Â - Multi-provider analysis with intelligent fallbacks\n1. **Autonomous Execution**Â - Agents execute custom Python code for memory updates\n\n\nThe workflow starts when users select an agent type (Activity Tracker or Focus Assistant). The agent autonomously captures screen content using MCP tools, processes it, injects relevant memory context, and sends it to LLM providers for analysis. The results are stored in persistent memory and displayed in the real-time dashboard.\n\nEach agent operates independently, making decisions about which tools to use based on its YAML configuration and the current context. This allows for true agentic behavior where the AI adapts to different scenarios without hardcoded logic.\n\n# **Why we chose Railway**\n\nRailway transformed our deployment experience from a complex multi-step process into a single git push. The platform's automatic detection of our multi-service architecture meant we could focus on building AI features instead of configuring infrastructure.\n\n**Speed to First Deploy**: Within minutes of connecting a repository to Railway, the platform automatically detects Dockerfiles, builds the application with multi-stage optimization, and provides a live URL. This rapid iteration cycle let us test changes in production quickly during the hackathon timeline.\n\n**Environment Management**: Railway's environment variables system solved a critical challenge for our multi-LLM setup. We needed to securely manage API keys for OpenAI, Anthropic, and other providers while maintaining clear separation between development and production configurations.\n\n**Intelligent Build Process**: Railway's Docker intelligence automatically optimized our multi-language build (Python + Node.js + TypeScript) with layer caching, reducing build times from 6+ minutes to under 3 minutes.\n\n**Real-time Debugging**: The logging system proved invaluable for debugging our agent interactions. Being able to see real-time logs from our FastAPI backend, MCP server, and agent processing helped us identify and fix issues quickly during development.\n\n**Template System**: Railway's ability to create public templates from our working deployment aligned perfectly with our goal of making Vygil easily reproducible for the community.\n\n\n\n**Vygil AI uses a sophisticated multi-stage Dockerfile that Railway handles flawlessly:**\n\n```docker\n# Multi-stage Dockerfile for Vygil AI Application\nFROM node:22-alpine AS base\n\n# Install system dependencies efficiently\nRUN apk add --no-cache \\\n    python3 py3-pip gcc g++ make curl bash\n\n# Install uv for fast Python dependency management\nRUN curl -LsSf https://astral.sh/uv/install.sh | sh\nENV PATH=\"/root/.local/bin:$PATH\"\n\n# Railway-optimized port configuration\nENV PORT=5173\nEXPOSE 8000 5173\n\n# Layer-optimized dependency installation\nCOPY frontend/package*.json ./frontend/\nCOPY mcp-server/package*.json ./mcp-server/\nRUN cd frontend && npm install\nRUN cd mcp-server && npm install && npm run build\n\n# Python environment with uv\nCOPY pyproject.toml uv.lock ./\nRUN uv sync\nENV PATH=\"/app/.venv/bin:$PATH\"\n\n# Health check for Railway monitoring\nHEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \\\n    CMD curl -f http://localhost:8000/api/health || exit 1\n```\n\n**Railway's Docker advantages:**\n\n- **Automatic detection**Â - No configuration needed, Railway finds and builds the Dockerfile\n- **Intelligent layer caching**Â - Reduces build times from 6+ minutes to 3 minutes\n- **Multi-stage optimization**Â - Railway optimizes the build process automatically\n- **Environment injection**Â -Â `$PORT`Â and other variables injected seamlessly\n- **Health check integration**Â - Built-in monitoring without additional setup\nRailway's process management handles service coordination:\n\n```bash\n#!/bin/bash\n# Railway automatically injects $PORT environment variable\nPORT=${PORT:-5173}\n\n# Railway provides process monitoring and auto-restart\nsource .venv/bin/activate\nstart_services_with_railway_monitoring\n\n# Railway handles graceful shutdowns and health checks\n```\n\nTo deploy on Railway:\n\n1. **Create a new project**Â using the VygilAI template\n1. **Configure the template**Â with your repository source\n1. **Configure environment variables:**\n\n\n```bash\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\nPORT=8000\nLOG_LEVEL=INFO\nDEFAULT_AGENT=vygil-focus-assistant\n```\n\n1. **Set up the service**Â with automatic deployments enabled\n1. **Configure health checks**Â pointing toÂ `/health`Â endpoint\n1. **Monitor deployment logs**Â for successful startup\n\n\nRailway automatically triggers deployments on git pushes to the connected branch. The build process typically takes 3-5 minutes, and the application becomes available immediately after successful deployment.\n\n## **Create a public template**\n\nRailway's template system allows others to deploy Vygil AI with minimal setup. Creating a template from your working project preserves the exact configuration that works.\n\nTo generate a template:\n\n1. Navigate to your Vygil AI project in Railway dashboard\n1. Click the \"Create Template\" button in project settings\n1. Configure template metadata like name, description, and repository \n1. Set required environment variables with descriptions\n1. Test the template by deploying a new instance\n1. Publish to Railway's template marketplace (optional)\n\n\nFor detailed template creation instructions, seeÂ [Railway's template creation guide](https://docs.railway.com/guides/create).\n\nThe template includes all necessary configuration, environment variable placeholders, and service settings. Users deploying from the template only need to provide their LLM API keys.\n\n\n\n# **Reproduce this in your account**\n\nYou can deploy Vygil AI to your Railway account using our public template:\n\n**Deploy on Railway:**Â [https://railway.com/deploy/vygil-ai?referralCode=meIjQ1](https://railway.com/deploy/vygil-ai?referralCode=meIjQ1)\n\n## **Results**\n\nOur Railway deployment performed exceptionally well during testing. The application handles screen capture processing with sub-second response times for most agent operations. The multi-service architecture scales appropriately under load, with Railway's automatic resource allocation adapting to usage patterns.\n\n**What worked:**\n\n- Seamless multi-service deployment with zero DevOps configuration\n- Automatic HTTPS and domain provisioning\n- Real-time logging for debugging agent behavior and LLM interactions\n- Environment variable management for secure API key handling\n- **Fast dependency management**: uv reduced Python dependency installation from 2+ minutes to under 30 seconds\n\n\nThe production deployment atÂ [https://vygil-ai-production.up.railway.app](https://vygil-ai-production.up.railway.app/)Â demonstrates full functionality with both agent types, real-time monitoring, and persistent memory across sessions with 99.7% uptime.\n\n## **What's next**\n\nOur roadmap focuses on expanding agent capabilities and improving the user experience. Key developments include:\n\n**Short term:**\n\n- Additional agent types for specialized workflows (code review, meeting analysis)\n- Enhanced memory management with automatic summarization\n- Multi-sensor integration (camera, microphone, system events)\n- Integration with popular productivity tools (Notion, Slack, Calendar)\n\n\n**Medium term:**\n\n- No-code agent creation through visual YAML configuration\n- Complete local deployment with offline AI models for privacy\n- Team analytics and collaboration features\n- Advanced privacy controls and data retention policies\n- API access for third-party integrations\n\n\nWe're building an open ecosystem around Vygil AI. The Railway template enables easy deployment and customization for developers interested in exploring multi-agent AI architectures.\n\n",
  "publishedDate": "2025-08-10",
  "tags": [
    "Technology",
    "Artificial Intelligence",
    "MCP",
    "Python",
    "Railway",
    "Agentic AI",
    "LLM"
  ],
  "status": "Published",
  "isPublic": true,
  "coverImage": "",
  "last_edited_time": "2025-08-11T04:02:00.000Z"
}