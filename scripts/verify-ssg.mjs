#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * SSG Verification Script
 * Verifies that all expected HTML files were generated and contain pre-rendered content
 */

console.log('üîç Starting SSG verification...\n');

// Load posts to determine expected routes
let posts = [];
try {
  const postsPath = path.join(__dirname, '../public/static-data/posts.json');
  if (fs.existsSync(postsPath)) {
    posts = JSON.parse(fs.readFileSync(postsPath, 'utf-8'));
  }
} catch (error) {
  console.warn('‚ö†Ô∏è Could not load posts for verification:', error.message);
}

// Expected files that should be generated by SSG
const expectedFiles = [
  'dist/index.html',
  'dist/blog/index.html',
  ...posts.map(post => `dist/blog/${post.slug}/index.html`)
];

console.log(`üìã Expected files (${expectedFiles.length}):`)
expectedFiles.forEach(file => console.log(`   - ${file}`));
console.log();

let errors = 0;
let warnings = 0;

// Check each expected file
for (const file of expectedFiles) {
  const filePath = path.join(__dirname, '..', file);
  
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå Missing: ${file}`);
    errors++;
    continue;
  }
  
  const content = fs.readFileSync(filePath, 'utf-8');
  const fileSize = content.length;
  
  // Check if file appears to be empty (just SPA shell)
  if (content.includes('<div id="root"></div>') && fileSize < 1000) {
    console.error(`‚ùå ${file} appears to be empty SPA shell (${fileSize} bytes)`);
    errors++;
    continue;
  }
  
  // Check for pre-rendered content indicators
  const hasPreRenderedContent = (
    content.includes('<h1') ||
    content.includes('<main') ||
    content.includes('class="') ||
    content.includes('Blog') ||
    content.includes('Portfolio')
  );
  
  if (!hasPreRenderedContent) {
    console.warn(`‚ö†Ô∏è ${file} may not have pre-rendered content`);
    warnings++;
  }
  
  // Check for proper meta tags
  const hasSEOTags = (
    content.includes('<title>') &&
    content.includes('meta name="description"') &&
    content.includes('meta property="og:title"')
  );
  
  if (!hasSEOTags) {
    console.warn(`‚ö†Ô∏è ${file} missing SEO meta tags`);
    warnings++;
  }
  
  console.log(`‚úÖ ${file} (${fileSize} bytes, ${hasPreRenderedContent ? 'with content' : 'shell only'}, ${hasSEOTags ? 'with SEO' : 'no SEO'})`);
}

console.log();

// Additional checks
console.log('üîç Additional checks:');

// Check if static data exists
const staticDataPath = path.join(__dirname, '../public/static-data/posts.json');
if (fs.existsSync(staticDataPath)) {
  const staticPosts = JSON.parse(fs.readFileSync(staticDataPath, 'utf-8'));
  console.log(`‚úÖ Static data exists (${staticPosts.length} posts)`);
} else {
  console.warn('‚ö†Ô∏è Static data not found');
  warnings++;
}

// Check if assets are properly generated
const distAssetsPath = path.join(__dirname, '../dist/assets');
if (fs.existsSync(distAssetsPath)) {
  const assets = fs.readdirSync(distAssetsPath);
  const jsFiles = assets.filter(file => file.endsWith('.js')).length;
  const cssFiles = assets.filter(file => file.endsWith('.css')).length;
  console.log(`‚úÖ Assets generated (${jsFiles} JS, ${cssFiles} CSS)`);
} else {
  console.warn('‚ö†Ô∏è Assets directory not found');
  warnings++;
}

// Check for specific content in main index.html
const mainIndexPath = path.join(__dirname, '../dist/index.html');
if (fs.existsSync(mainIndexPath)) {
  const content = fs.readFileSync(mainIndexPath, 'utf-8');
  
  if (content.includes('Harmanpreet Singh')) {
    console.log('‚úÖ Homepage contains portfolio content');
  } else {
    console.warn('‚ö†Ô∏è Homepage missing portfolio content');
    warnings++;
  }
}

// Check for blog content in blog index
const blogIndexPath = path.join(__dirname, '../dist/blog/index.html');
if (fs.existsSync(blogIndexPath)) {
  const content = fs.readFileSync(blogIndexPath, 'utf-8');
  
  if (content.includes('Blog') || content.includes('blog')) {
    console.log('‚úÖ Blog page contains blog content');
  } else {
    console.warn('‚ö†Ô∏è Blog page missing blog content');
    warnings++;
  }
}

console.log();

// Summary
console.log('üìä SSG Verification Summary:');
console.log(`   Files checked: ${expectedFiles.length}`);
console.log(`   Errors: ${errors}`);
console.log(`   Warnings: ${warnings}`);

if (errors === 0 && warnings === 0) {
  console.log('üéâ SSG verification passed! All files generated successfully.');
  process.exit(0);
} else if (errors === 0) {
  console.log('‚ö†Ô∏è SSG verification completed with warnings.');
  process.exit(0);
} else {
  console.log('‚ùå SSG verification failed!');
  process.exit(1);
}